//
// Created by akovari on 17.11.24.
//

#include "Optimizer.h"
#include "common.h"
#include "ast_visitor_impl.h"

namespace yona::compiler {
using namespace std;
OptimizerResult Optimizer::visit(AddExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(AliasCall *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(ApplyExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(AsDataStructurePattern *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(BinaryNotOpExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(BitwiseAndExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(BitwiseOrExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(BitwiseXorExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(BodyWithGuards *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(BodyWithoutGuards *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(ByteExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(CaseExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(CaseClause *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(CatchExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(CatchPatternExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(CharacterExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(ConsLeftExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(ConsRightExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(DictExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(DictGeneratorExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(DictGeneratorReducer *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(DictPattern *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(DivideExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(DoExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(EqExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(FalseLiteralExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(FieldAccessExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(FieldUpdateExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(FloatExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(FqnAlias *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(FqnExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(FunctionAlias *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(FunctionExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(FunctionsImport *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(GtExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(GteExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(HeadTailsHeadPattern *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(HeadTailsPattern *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(IfExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(ImportClauseExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(ImportExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(InExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(IntegerExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(JoinExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(KeyValueCollectionExtractorExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(LambdaAlias *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(LeftShiftExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(LetExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(LogicalAndExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(LogicalNotOpExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(LogicalOrExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(LtExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(LteExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(ModuloExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(ModuleAlias *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(ModuleCall *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(ExprCall *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(ModuleExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(ModuleImport *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(MultiplyExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(NameCall *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(NameExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(NeqExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(PackageNameExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(PatternAlias *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(PatternExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(PatternValue *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(PatternWithGuards *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(PatternWithoutGuards *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(PipeLeftExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(PipeRightExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(PowerExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(RaiseExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(RangeSequenceExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(RecordInstanceExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(RecordNode *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(RecordPattern *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(OrPattern *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(RightShiftExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(SeqGeneratorExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(SeqPattern *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(SetExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(SetGeneratorExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(StringExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(SubtractExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(SymbolExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(TailsHeadPattern *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(TrueLiteralExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(TryCatchExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(TupleExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(TuplePattern *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(UnderscoreNode *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(UnitExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(ValueAlias *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(ValueCollectionExtractorExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(ValuesSequenceExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(WithExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(ZerofillRightShiftExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(FunctionDeclaration *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(TypeDeclaration *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(TypeDefinition *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(TypeNode *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(TypeInstance *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(MainNode *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(BuiltinTypeNode *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(UserDefinedTypeNode *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(TypeNameNode *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(IdentifierExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(ExprNode *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(AstNode *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(ScopedNode *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(PatternNode *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(ValueExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(SequenceExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(FunctionBody *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(AliasExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(OpExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(BinaryOpExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(CallExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(GeneratorExpr *node) const { return OptimizerResult(node); }
OptimizerResult Optimizer::visit(CollectionExtractorExpr *node) const { return OptimizerResult(node); }
} // namespace yona::compiler
