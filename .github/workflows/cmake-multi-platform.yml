name: CMake Multi-Platform Build

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-latest, windows-2025]
        build_type: [Debug, Release]
        include:
          # Linux Debug
          - os: ubuntu-24.04
            build_type: Debug
            name: Linux Debug
            configure_preset: x64-debug-linux
            build_preset: build-debug-linux
            test_preset: unit-tests-linux
            llvm_version: 20
          
          # Linux Release
          - os: ubuntu-24.04
            build_type: Release
            name: Linux Release
            configure_preset: x64-release-linux
            build_preset: build-release-linux
            test_preset: unit-tests-linux
            llvm_version: 20
            
          # macOS Debug
          - os: macos-latest
            build_type: Debug
            name: macOS Debug
            configure_preset: x64-debug-macos
            build_preset: build-debug-macos
            test_preset: unit-tests-macos
            llvm_version: 20
            
          # macOS Release
          - os: macos-latest
            build_type: Release
            name: macOS Release
            configure_preset: x64-release-macos
            build_preset: build-release-macos
            test_preset: unit-tests-macos
            llvm_version: 20
            
          # Windows Debug
          - os: windows-2025
            build_type: Debug
            name: Windows Debug
            configure_preset: x64-debug
            build_preset: build-debug
            test_preset: unit-tests-windows
            llvm_version: 20
            llvm_minor_version: 1.7
            boost_version: 1_88_0

          # Windows Release
          - os: windows-2025
            build_type: Release
            name: Windows Release
            configure_preset: x64-release
            build_preset: build-release
            test_preset: unit-tests-windows
            llvm_version: 20
            llvm_minor_version: 1.7
            boost_version: 1_88_0

    name: ${{ matrix.name }}
    
    steps:
    - uses: actions/checkout@v4

    # Cache vcpkg packages
    - name: Cache vcpkg
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/vcpkg
          !${{ github.workspace }}/vcpkg/buildtrees
          !${{ github.workspace }}/vcpkg/packages
          !${{ github.workspace }}/vcpkg/downloads
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-

    # Install LLVM on Linux
    - name: Install LLVM (Linux)
      if: runner.os == 'Linux'
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository "deb http://apt.llvm.org/noble/ llvm-toolchain-noble-${{ matrix.llvm_version }} main"
        sudo apt update
        sudo apt install -y \
          libllvm${{ matrix.llvm_version }} \
          llvm-${{ matrix.llvm_version }} \
          llvm-${{ matrix.llvm_version }}-dev \
          llvm-${{ matrix.llvm_version }}-runtime \
          clang-${{ matrix.llvm_version }} \
          clang-tools-${{ matrix.llvm_version }} \
          libclang-common-${{ matrix.llvm_version }}-dev \
          libclang-${{ matrix.llvm_version }}-dev \
          libclang1-${{ matrix.llvm_version }} \
          clang-format-${{ matrix.llvm_version }} \
          clangd-${{ matrix.llvm_version }} \
          libc++-${{ matrix.llvm_version }}-dev \
          libc++-abi${{ matrix.llvm_version }}-dev \
          libboost-all-dev

    # Install dependencies on macOS
    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install llvm@${{ matrix.llvm_version }} boost ninja
        # Check LLVM version
        brew list --versions llvm
        echo "LLVM_DIR=$(brew --prefix llvm@${{ matrix.llvm_version }})" >> $GITHUB_ENV
        echo "LDFLAGS=-L$(brew --prefix llvm@${{ matrix.llvm_version }})/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I$(brew --prefix llvm@${{ matrix.llvm_version }})/include" >> $GITHUB_ENV
        echo "$(brew --prefix llvm@${{ matrix.llvm_version }})/bin" >> $GITHUB_PATH
        # Override compiler paths for CI
        echo "CC=$(brew --prefix llvm@${{ matrix.llvm_version }})/bin/clang" >> $GITHUB_ENV
        echo "CXX=$(brew --prefix llvm@${{ matrix.llvm_version }})/bin/clang++" >> $GITHUB_ENV

    # Cache LLVM (Windows)
    - name: Cache LLVM (Windows)
      if: runner.os == 'Windows'
      uses: actions/cache@v4
      with:
        path: C:\local\LLVM
        key: llvm-${{ matrix.llvm_version }}-${{ matrix.llvm_minor_version }}

    # Install LLVM on Windows
    - name: Install LLVM (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $llvmVersion = "${{ matrix.llvm_version }}"
        $llvmMinorVersion = "${{ matrix.llvm_minor_version }}"
        $destDir = "C:\local\LLVM"
        $clangExe = Join-Path $destDir "bin\clang.exe"
        if (!(Test-Path $clangExe)) {
          $llvmBaseUrl = "https://github.com/llvm/llvm-project/releases/download"
          $llvmTag = "llvmorg-$llvmVersion.$llvmMinorVersion"
          $llvmArchive = "clang+llvm-$llvmVersion.$llvmMinorVersion-x86_64-pc-windows-msvc.tar.xz"
          $downloadUrl = "$llvmBaseUrl/$llvmTag/$llvmArchive"
          $tempArchive = "$env:RUNNER_TEMP\$llvmArchive"

          # Create destination directory
          if (!(Test-Path $destDir)) {
            New-Item -ItemType Directory -Path $destDir | Out-Null
          }

          # Download LLVM archive
          Invoke-WebRequest -Uri $downloadUrl -OutFile $tempArchive

          # Extract .tar.xz (requires 7zip, available on GitHub runners)
          7z x $tempArchive -o"$env:RUNNER_TEMP\llvm-extract" | Out-Null
          $tarFile = Get-ChildItem "$env:RUNNER_TEMP\llvm-extract" -Filter *.tar | Select-Object -First 1
          7z x $tarFile.FullName -o"$destDir" | Out-Null
        }

        # Set environment variables
        echo "LLVM_DIR=$destDir" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "$destDir\bin" | Out-File -FilePath $env:GITHUB_PATH -Append

    # Cache Boost (Windows)
    - name: Cache Boost (Windows)
      if: runner.os == 'Windows'
      uses: actions/cache@v4
      with:
        path: C:\local\boost
        key: boost

    # Install Boost (Windows)
    - name: Install Boost (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $boostVersion = "${{ matrix.boost_version }}"        
        $boostUrl = "https://archives.boost.io/release/1.88.0/binaries/boost_$boostVersion-bin-msvc-all-32-64.7z"
        $boostArchive = "$env:RUNNER_TEMP\boost_$boostVersion.7z"
        $boostDest = "C:\local"
        $boostDir = "C:\local\boost"

        if (!(Test-Path $boostDir)) {
          Invoke-WebRequest -Uri $boostUrl -OutFile $boostArchive
          7z x $boostArchive -o"$boostDest" | Out-Null
        }

        # Optionally set BOOST_ROOT for CMake
        echo "BOOST_ROOT=$boostDir" | Out-File -FilePath $env:GITHUB_ENV -Append

    # Install CMake and Ninja
    - uses: lukka/get-cmake@latest

    # Setup vcpkg
    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        # This will use the vcpkg.json and vcpkg-configuration.json from the repo
        runVcpkgInstall: false

    # Configure, Build and Test
    - name: Run CMake
      uses: lukka/run-cmake@v10
      with:
        configurePreset: ${{ matrix.configure_preset }}
        buildPreset: ${{ matrix.build_preset }}
        testPreset: ${{ matrix.test_preset }}
        testPresetAdditionalArgs: "['--output-junit', 'test-results.xml']"

    # Upload test results
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.name }}
        path: '**/test-results.xml'

    # Test Report
    - name: Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Tests - ${{ matrix.name }}
        path: '**/test-results.xml'
        reporter: java-junit
