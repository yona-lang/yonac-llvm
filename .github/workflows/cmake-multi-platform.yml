name: CMake Multi-Platform Build

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-15, windows-2025]
        build_type: [Debug, Release]
        include:
          # Linux Debug
          - os: ubuntu-24.04
            build_type: Debug
            name: Linux Debug
            configure_preset: x64-debug-linux
            build_preset: build-debug-linux
            test_preset: unit-tests-linux
            llvm_version: 20

          # Linux Release
          - os: ubuntu-24.04
            build_type: Release
            name: Linux Release
            configure_preset: x64-release-linux
            build_preset: build-release-linux
            test_preset: unit-tests-linux
            llvm_version: 20

          # macOS Debug
          - os: macos-15
            build_type: Debug
            name: macOS Debug
            configure_preset: x64-debug-macos
            build_preset: build-debug-macos
            test_preset: unit-tests-macos
            llvm_version: 20

          # macOS Release
          - os: macos-15
            build_type: Release
            name: macOS Release
            configure_preset: x64-release-macos
            build_preset: build-release-macos
            test_preset: unit-tests-macos
            llvm_version: 20

          # Windows Debug
          - os: windows-2025
            build_type: Debug
            name: Windows Debug
            configure_preset: x64-debug
            build_preset: build-debug
            test_preset: unit-tests-windows
            llvm_version: 20
            llvm_minor_version: 1.7

          # Windows Release
          - os: windows-2025
            build_type: Release
            name: Windows Release
            configure_preset: x64-release
            build_preset: build-release
            test_preset: unit-tests-windows
            llvm_version: 20
            llvm_minor_version: 1.7

    name: ${{ matrix.name }}

    steps:
    - uses: actions/checkout@v4

    # Install LLVM on Linux
    - name: Install LLVM (Linux)
      if: runner.os == 'Linux'
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository "deb http://apt.llvm.org/noble/ llvm-toolchain-noble-${{ matrix.llvm_version }} main"
        sudo apt update
        sudo apt upgrade -y
        sudo apt install -y \
          libllvm${{ matrix.llvm_version }} \
          llvm-${{ matrix.llvm_version }} \
          llvm-${{ matrix.llvm_version }}-dev \
          llvm-${{ matrix.llvm_version }}-runtime \
          clang-${{ matrix.llvm_version }} \
          clang-tools-${{ matrix.llvm_version }} \
          libclang-common-${{ matrix.llvm_version }}-dev \
          libclang-${{ matrix.llvm_version }}-dev \
          libclang1-${{ matrix.llvm_version }} \
          clang-format-${{ matrix.llvm_version }} \
          clangd-${{ matrix.llvm_version }} \
          lld-${{ matrix.llvm_version }} \
          libc++-${{ matrix.llvm_version }}-dev \
          libc++abi-${{ matrix.llvm_version }}-dev

    # Install dependencies on macOS
    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install ninja llvm@${{ matrix.llvm_version }} lld@${{ matrix.llvm_version }}
        # Check LLVM version
        brew list --versions llvm
        echo "LLVM_DIR=$(brew --prefix llvm@${{ matrix.llvm_version }})" >> $GITHUB_ENV
        echo "LDFLAGS=-L$(brew --prefix llvm@${{ matrix.llvm_version }})/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I$(brew --prefix llvm@${{ matrix.llvm_version }})/include" >> $GITHUB_ENV
        echo "$(brew --prefix llvm@${{ matrix.llvm_version }})/bin" >> $GITHUB_PATH
        # Override compiler paths for CI
        echo "CC=$(brew --prefix llvm@${{ matrix.llvm_version }})/bin/clang" >> $GITHUB_ENV
        echo "CXX=$(brew --prefix llvm@${{ matrix.llvm_version }})/bin/clang++" >> $GITHUB_ENV

    # Cache LLVM (Windows)
    - name: Cache LLVM (Windows)
      if: runner.os == 'Windows'
      uses: actions/cache@v4
      with:
        path: C:\LLVM
        key: llvm-${{ matrix.llvm_version }}-${{ matrix.llvm_minor_version }}

    # Install LLVM on Windows
    - name: Install LLVM (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $llvmVersion = "${{ matrix.llvm_version }}"
        $llvmMinorVersion = "${{ matrix.llvm_minor_version }}"
        $destDir = "C:\LLVM"
        $clangExe = Join-Path $destDir "bin\clang.exe"
        if (!(Test-Path $clangExe)) {
          $llvmBaseUrl = "https://github.com/llvm/llvm-project/releases/download"
          $llvmTag = "llvmorg-$llvmVersion.$llvmMinorVersion"
          $llvmArchive = "clang+llvm-$llvmVersion.$llvmMinorVersion-x86_64-pc-windows-msvc.tar.xz"
          $downloadUrl = "$llvmBaseUrl/$llvmTag/$llvmArchive"
          $tempArchive = "$env:RUNNER_TEMP\$llvmArchive"

          # Create destination directory
          if (!(Test-Path $destDir)) {
            New-Item -ItemType Directory -Path $destDir | Out-Null
          }

          # Download LLVM archive
          Invoke-WebRequest -Uri $downloadUrl -OutFile $tempArchive

          # Extract .tar.xz (requires 7zip, available on GitHub runners)
          7z x $tempArchive -o"$env:RUNNER_TEMP\llvm-extract" | Out-Null
          $tarFile = Get-ChildItem "$env:RUNNER_TEMP\llvm-extract" -Filter *.tar | Select-Object -First 1
          7z x $tarFile.FullName -o"$env:RUNNER_TEMP\llvm-final" | Out-Null

          # Move the nested directory content to the final destination
          $extractedDir = Get-ChildItem "$env:RUNNER_TEMP\llvm-final" -Directory | Select-Object -First 1
          if ($extractedDir) {
            Get-ChildItem -Path $extractedDir.FullName | Move-Item -Destination $destDir -Force
          }
        }

    - name: Set Up LLVM (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # Set environment variables
        echo "LLVM_INSTALL_PREFIX=C:\LLVM" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "CC=C:\LLVM\bin\clang.exe" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "CXX=C:\LLVM\bin\clang++.exe" | Out-File -FilePath $env:GITHUB_ENV -Append

    # Install CMake and Ninja
    - uses: lukka/get-cmake@latest

    # Configure, Build and Test
    - name: Run CMake
      uses: lukka/run-cmake@v10
      with:
        configurePreset: ${{ matrix.configure_preset }}
        buildPreset: ${{ matrix.build_preset }}
        testPreset: ${{ matrix.test_preset }}
        testPresetAdditionalArgs: "['--output-junit', 'test-results.xml']"

    # Run tests directly with doctest JUnit reporter for detailed results
    - name: Run Tests with Detailed Output
      if: always()
      shell: bash
      run: |
        # Find the test executable
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          TEST_EXE=$(find out/build -name "tests.exe" -type f | head -n 1)
        else
          TEST_EXE=$(find out/build -name "tests" -type f -executable | head -n 1)
        fi

        if [ -f "$TEST_EXE" ]; then
          echo "Running tests: $TEST_EXE"
          # Run with JUnit reporter for detailed test results
          "$TEST_EXE" --reporters=junit --out=doctest-results.xml || true
          # Also run with console reporter for logs
          "$TEST_EXE" --reporters=console || true
        else
          echo "Test executable not found!"
        fi

    # Upload test results
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.name }}
        path: |
          **/test-results.xml
          **/doctest-results.xml

    # Parse test results and create summary
    - name: Parse Test Results
      if: always()
      shell: bash
      run: |
        # Find the test results file (prefer doctest-results.xml for detailed info)
        TEST_FILE=$(find . -name "doctest-results.xml" -type f | head -n 1)
        if [ ! -f "$TEST_FILE" ]; then
          TEST_FILE=$(find . -name "test-results.xml" -type f | head -n 1)
        fi
        if [ -f "$TEST_FILE" ]; then
          # Extract test counts using grep and sed
          TOTAL=$(grep -o 'tests="[0-9]*"' "$TEST_FILE" | sed 's/tests="//' | sed 's/"//g' | head -n 1)
          FAILURES=$(grep -o 'failures="[0-9]*"' "$TEST_FILE" | sed 's/failures="//' | sed 's/"//g' | head -n 1)
          ERRORS=$(grep -o 'errors="[0-9]*"' "$TEST_FILE" | sed 's/errors="//' | sed 's/"//g' | head -n 1)

          # Default to 0 if not found
          TOTAL=${TOTAL:-0}
          FAILURES=${FAILURES:-0}
          ERRORS=${ERRORS:-0}
          PASSED=$((TOTAL - FAILURES - ERRORS))

          # Create summary
          echo "### Test Results for ${{ matrix.name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Status | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| ✅ Passed | $PASSED |" >> $GITHUB_STEP_SUMMARY
          echo "| ❌ Failed | $FAILURES |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔥 Errors | $ERRORS |" >> $GITHUB_STEP_SUMMARY
          echo "| 📊 Total | $TOTAL |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ No test results found for ${{ matrix.name }}" >> $GITHUB_STEP_SUMMARY
        fi

    # Test Report
    - name: Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Tests - ${{ matrix.name }}
        path: '**/doctest-results.xml'
        reporter: java-junit
        fail-on-error: 'false'
        fail-on-empty: 'false'

  # Summary job to aggregate all test results
  test-summary:
    name: Test Summary
    needs: build
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        pattern: test-results-*

    - name: Create Test Summary
      run: |
        echo "# 📊 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Platform Overview" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Platform | Total | ✅ Passed | ❌ Failed | 🔥 Errors | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|-----------|-----------|-----------|--------|" >> $GITHUB_STEP_SUMMARY

        TOTAL_ALL=0
        PASSED_ALL=0
        FAILED_ALL=0
        ERRORS_ALL=0

        # Process each test result directory
        for dir in test-results-*; do
          if [ -d "$dir" ]; then
            # Extract platform name from directory name
            PLATFORM=${dir#test-results-}

            # Find test results file in the directory (prefer doctest-results.xml for detailed info)
            file=$(find "$dir" -name "doctest-results.xml" -type f | head -n 1)
            if [ ! -f "$file" ]; then
              file=$(find "$dir" -name "test-results.xml" -type f | head -n 1)
            fi

            if [ -f "$file" ]; then
              # Extract test counts
              TOTAL=$(grep -o 'tests="[0-9]*"' "$file" | sed 's/tests="//' | sed 's/"//g' | head -n 1)
              FAILURES=$(grep -o 'failures="[0-9]*"' "$file" | sed 's/failures="//' | sed 's/"//g' | head -n 1)
              ERRORS=$(grep -o 'errors="[0-9]*"' "$file" | sed 's/errors="//' | sed 's/"//g' | head -n 1)

              # Default to 0 if not found
              TOTAL=${TOTAL:-0}
              FAILURES=${FAILURES:-0}
              ERRORS=${ERRORS:-0}
              PASSED=$((TOTAL - FAILURES - ERRORS))

              # Update totals
              TOTAL_ALL=$((TOTAL_ALL + TOTAL))
              PASSED_ALL=$((PASSED_ALL + PASSED))
              FAILED_ALL=$((FAILED_ALL + FAILURES))
              ERRORS_ALL=$((ERRORS_ALL + ERRORS))

              # Determine status icon
              if [ "$FAILURES" -eq 0 ] && [ "$ERRORS" -eq 0 ]; then
                STATUS="✅"
              else
                STATUS="❌"
              fi

              echo "| $PLATFORM | $TOTAL | $PASSED | $FAILURES | $ERRORS | $STATUS |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        done

        # Add totals row
        echo "| **TOTAL** | **$TOTAL_ALL** | **$PASSED_ALL** | **$FAILED_ALL** | **$ERRORS_ALL** | - |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Add success rate
        if [ "$TOTAL_ALL" -gt 0 ]; then
          SUCCESS_RATE=$(( (PASSED_ALL * 100) / TOTAL_ALL ))
          echo "### 📈 Success Rate: ${SUCCESS_RATE}%" >> $GITHUB_STEP_SUMMARY
        fi
